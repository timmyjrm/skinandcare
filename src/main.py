import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# Load environment variables
load_dotenv()
# Get admin chat ID
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
RECIPIENT_IDS = [id.strip() for id in os.getenv("RECIPIENT_IDS", "").split(",") if id.strip()]

# Global variable to track current recipient index
current_recipient_index = 0

def get_next_recipient():
    """Get next recipient ID in rotation."""
    global current_recipient_index
    if not RECIPIENT_IDS:
        return None
    
    recipient_id = RECIPIENT_IDS[current_recipient_index]
    current_recipient_index = (current_recipient_index + 1) % len(RECIPIENT_IDS)
    return recipient_id

# States for conversation
(
    WAITING_FOR_NAME,
    WAITING_FOR_AGE,
    WAITING_FOR_CITY,
    WAITING_FOR_MEDIA,
    QUESTION_1,
    QUESTION_2,
    QUESTION_3,
    QUESTION_4,
    QUESTION_5,
    CONTACT_SHARING,
) = range(10)

# Questions and their possible answers
QUESTIONS = {
    QUESTION_1: {
        "text": "1Ô∏è‚É£ –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ –≤–∞—à—É –∫–æ–∂—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?",
        "options": [["–ñ–∏—Ä–Ω–∞—è", "–°—É—Ö–∞—è"], ["–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è"]]
    },
    QUESTION_2: {
        "text": "2Ô∏è‚É£ –ë–µ—Å–ø–æ–∫–æ—è—Ç –ª–∏ –≤–∞—Å –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–∂–µ?",
        "options": [["–ß–∞—Å—Ç–æ", "–ò–Ω–æ–≥–¥–∞"], ["–†–µ–¥–∫–æ", "–ù–∏–∫–æ–≥–¥–∞"]]
    },
    QUESTION_3: {
        "text": "3Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–∂–µ–π –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
        "options": [["–¢—É—Å–∫–ª–æ—Å—Ç—å", "–ü–æ—Ä—ã"], ["–ù–µ—Ä–æ–≤–Ω—ã–π —Ç–æ–Ω", "–®–µ–ª—É—à–µ–Ω–∏–µ"]]
    },
    QUESTION_4: {
        "text": "4Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É—Ö–∞–∂–∏–≤–∞–µ—Ç–µ –∑–∞ –∫–æ–∂–µ–π?",
        "options": [["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"], ["–†–µ–¥–∫–æ", "–ù–∏–∫–æ–≥–¥–∞"]]
    },
    QUESTION_5: {
        "text": "5Ô∏è‚É£ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –≤ –º–µ—Å—è—Ü?",
        "options": [["–î–æ 3000‚ÇΩ", "3000-7000‚ÇΩ"], ["7000-15000‚ÇΩ", "–ë–æ–ª–µ–µ 15000‚ÇΩ"]]
    }
}

# Store user answers
user_answers = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send welcome message and ask for name."""
    # Clear all user data when starting new conversation
    context.user_data.clear()
    
    welcome_message = (
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–∞—à–µ–π –∫–æ–∂–∏ –∏ –ø–æ–¥–±–µ—Ä—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ "
        "–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? üòä"
    )
    await update.message.reply_text(welcome_message)
    return WAITING_FOR_NAME

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle name and ask for age."""
    name = update.message.text
    context.user_data['name'] = name
    
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! ‚ú®\n"
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"
    )
    return WAITING_FOR_AGE

async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's age and ask for city."""
    age = update.message.text
    
    # Store age
    context.user_data['age'] = age
    
    # Ask for city
    await update.message.reply_text(
        "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? üèôÔ∏è\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    )
    return WAITING_FOR_CITY

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's city and ask for photo."""
    city = update.message.text
    name = context.user_data.get('name', '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç')
    
    # Store city
    context.user_data['city'] = city
    
    # Ask for photo
    await update.message.reply_text(
        f"{name}, —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤–∞—à–µ–π –∫–æ–∂–∏ üì∏\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –æ—Ü–µ–Ω–∏—Ç—å –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
    )
    return WAITING_FOR_MEDIA

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle received photo or video and proceed to questions."""
    name = context.user_data.get('name', '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç')
    age = context.user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    city = context.user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    # Store the file_id of the media
    if update.message.photo:
        context.user_data['media_type'] = 'photo'
        context.user_data['media_id'] = update.message.photo[-1].file_id
    elif update.message.video:
        context.user_data['media_type'] = 'video'
        context.user_data['media_id'] = update.message.video.file_id
    
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}! üåü\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥(–ª–∞) "
        "—Ç–æ—á–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–∂–∏."
    )
    
    # Start with the first question
    question = QUESTIONS[QUESTION_1]
    reply_markup = ReplyKeyboardMarkup(
        question["options"], one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text(question["text"], reply_markup=reply_markup)
    return QUESTION_1

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle user's answer and proceed to the next question."""
    user_id = update.effective_user.id
    answer = update.message.text
    current_question = context.user_data.get('current_question', QUESTION_1)
    
    # Store the answer
    if 'answers' not in context.user_data:
        context.user_data['answers'] = {}
    context.user_data['answers'][current_question] = answer
    
    # Determine next question
    next_question = None
    if current_question == QUESTION_1:
        next_question = QUESTION_2
    elif current_question == QUESTION_2:
        next_question = QUESTION_3
    elif current_question == QUESTION_3:
        next_question = QUESTION_4
    elif current_question == QUESTION_4:
        next_question = QUESTION_5
    
    if next_question:
        # Store current question for next iteration
        context.user_data['current_question'] = next_question
        
        # Send next question
        question = QUESTIONS[next_question]
        reply_markup = ReplyKeyboardMarkup(
            question["options"], one_time_keyboard=True, resize_keyboard=True
        )
        await update.message.reply_text(question["text"], reply_markup=reply_markup)
        return next_question
    else:
        # All questions answered, proceed to recommendations
        return await handle_final_question(update, context)

async def handle_final_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle final question and provide recommendations."""
    user_id = update.effective_user.id
    answers = context.user_data.get('answers', {})
    name = context.user_data.get('name', '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç')
    age = context.user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    city = context.user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    skin_type = answers.get(QUESTION_1, "")
    acne = answers.get(QUESTION_2, "")
    skin_concern = answers.get(QUESTION_3, "")
    care_frequency = answers.get(QUESTION_4, "")
    budget = answers.get(QUESTION_5, "")
    
    recommendation = f"üéâ {name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –í–æ—Ç –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∫–æ–∂–∏
    if skin_type == "–ñ–∏—Ä–Ω–∞—è":
        recommendation += (
            "üìå –î–ª—è –∂–∏—Ä–Ω–æ–π –∫–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–≥–∫–∏–µ –≥–µ–ª–µ–≤—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å —Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π\n"
            "‚Ä¢ –ú–∞—Ç–∏—Ä—É—é—â–∏–µ —Ç–æ–Ω–∏–∫–∏ –±–µ–∑ —Å–ø–∏—Ä—Ç–∞\n\n"
        )
    elif skin_type == "–°—É—Ö–∞—è":
        recommendation += (
            "üìå –î–ª—è —Å—É—Ö–æ–π –∫–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –ö—Ä–µ–º—ã —Å –ø–ª–æ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π\n"
            "‚Ä¢ –ú–∞—Å–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è\n\n"
        )
    elif skin_type == "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è":
        recommendation += (
            "üìå –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–æ–Ω –ª–∏—Ü–∞\n"
            "‚Ä¢ –õ–µ–≥–∫–∏–µ —É–≤–ª–∞–∂–Ω—è—é—â–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã\n"
            "‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É—é—â–∏–µ —Ç–æ–Ω–∏–∫–∏\n\n"
        )
    elif skin_type == "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è":
        recommendation += (
            "üìå –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –±–∞–∑–æ–≤—ã–π —É—Ö–æ–¥\n"
            "‚Ä¢ –£–≤–ª–∞–∂–Ω—è—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            "‚Ä¢ –ú—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ\n\n"
        )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è–º
    if acne == "–ß–∞—Å—Ç–æ" or acne == "–ò–Ω–æ–≥–¥–∞":
        recommendation += (
            "üîç –î–ª—è –±–æ—Ä—å–±—ã —Å –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è–º–∏:\n"
            "‚Ä¢ –¢–æ—á–µ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ü–∏–Ω–∫–æ–º\n"
            "‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å—ã–≤–æ—Ä–æ—Ç–∫–∏\n"
            "‚Ä¢ –û—á–∏—â–∞—é—â–∏–µ –º–∞—Å–∫–∏ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n\n"
        )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º
    if skin_concern == "–¢—É—Å–∫–ª–æ—Å—Ç—å":
        recommendation += (
            "‚ú® –î–ª—è —Å–∏—è–Ω–∏—è –∫–æ–∂–∏:\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –°\n"
            "‚Ä¢ –ú—è–≥–∫–∏–µ –ø–∏–ª–∏–Ω–≥–∏\n"
            "‚Ä¢ –£–≤–ª–∞–∂–Ω—è—é—â–∏–µ –º–∞—Å–∫–∏\n\n"
        )
    elif skin_concern == "–ü–æ—Ä—ã":
        recommendation += (
            "üîç –î–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ—Ä:\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥–æ–º\n"
            "‚Ä¢ –ì–ª–∏–Ω—è–Ω—ã–µ –º–∞—Å–∫–∏\n"
            "‚Ä¢ –¢–æ–Ω–∏–∫–∏ —Å BHA-–∫–∏—Å–ª–æ—Ç–∞–º–∏\n\n"
        )
    elif skin_concern == "–ù–µ—Ä–æ–≤–Ω—ã–π —Ç–æ–Ω":
        recommendation += (
            "üé® –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ç–æ–Ω–∞:\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å –∞—Ä–±—É—Ç–∏–Ω–æ–º\n"
            "‚Ä¢ –û—Å–≤–µ—Ç–ª—è—é—â–∏–µ —Å—ã–≤–æ—Ä–æ—Ç–∫–∏\n"
            "‚Ä¢ –ê–ù–ê-–∫–∏—Å–ª–æ—Ç—ã\n\n"
        )
    elif skin_concern == "–®–µ–ª—É—à–µ–Ω–∏–µ":
        recommendation += (
            "üçØ –ü—Ä–∏ —à–µ–ª—É—à–µ–Ω–∏–∏ –∫–æ–∂–∏:\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–µ—Ä–∞–º–∏–¥–∞–º–∏\n"
            "‚Ä¢ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–∫–∏\n"
            "‚Ä¢ –ú—è–≥–∫–∏–µ —Å–∫—Ä–∞–±—ã\n\n"
        )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ —É—Ö–æ–¥–∞
    if care_frequency in ["–†–µ–¥–∫–æ", "–ù–∏–∫–æ–≥–¥–∞"]:
        recommendation += (
            "‚è∞ –í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —É—Ö–æ–¥ - –∫–ª—é—á –∫ –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–∂–µ! –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ:\n"
            "‚Ä¢ –£—Ç—Ä–æ: —É–º—ã–≤–∞–Ω–∏–µ ‚Üí —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ ‚Üí –∑–∞—â–∏—Ç–∞\n"
            "‚Ä¢ –í–µ—á–µ—Ä: –æ—á–∏—â–µ–Ω–∏–µ ‚Üí —É—Ö–æ–¥ ‚Üí —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ\n\n"
        )
    elif care_frequency == "2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é":
        recommendation += (
            "üìÖ –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ–∂–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ:\n"
            "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–∫–∏ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
    contact_message = (
        "üë©‚Äç‚öïÔ∏è –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ "
        "–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –≤–∞—à–µ–π –∫–æ–∂–∏.\n\n"
        "–ë–æ—Ç –Ω–µ —Å–≤—è–∑–∞–Ω –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–∏–Ω–∏–∫–æ–π, –∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n "
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:"
    )
    
    await update.message.reply_text(recommendation)
    
    # Create contact sharing button
    contact_button = KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True)
    
    await update.message.reply_text(contact_message, reply_markup=reply_markup)
    
    # Clear user answers but keep the name and age
    user_answers.pop(user_id, None)
    return CONTACT_SHARING

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle shared contact information and send application to admin."""
    contact = update.message.contact
    name = context.user_data.get('name', '–∫–ª–∏–µ–Ω—Ç')
    age = context.user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    city = context.user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    media_type = context.user_data.get('media_type')
    media_id = context.user_data.get('media_id')
    
    # Prepare application text
    application = (
        "üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}\n\n"
        "üìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
    )
    
    # Add answers to the application
    answers = context.user_data.get('answers', {})
    for q_num, q_data in QUESTIONS.items():
        answer = answers.get(q_num, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        question_text = q_data["text"].split('Ô∏è‚É£ ')[1] if 'Ô∏è‚É£ ' in q_data["text"] else q_data["text"]
        application += f"{question_text}\n‚û°Ô∏è {answer}\n\n"
    
    try:
        # Get next recipient in rotation
        recipient_id = get_next_recipient()
        if not recipient_id:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∑–∞—è–≤–æ–∫")
        
        print(f"Attempting to send application to recipient: {recipient_id}")
        
        # First send media to the recipient
        if media_type == 'photo':
            await context.bot.send_photo(
                chat_id=recipient_id,
                photo=media_id,
                caption="üì∏ –§–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        elif media_type == 'video':
            await context.bot.send_video(
                chat_id=recipient_id,
                video=media_id,
                caption="üé• –í–∏–¥–µ–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        
        # Then send application text to the recipient
        await context.bot.send_message(
            chat_id=recipient_id,
            text=application,
            parse_mode='HTML'
        )
        
        print(f"Successfully sent application to recipient: {recipient_id}")
        
        # Send notification to admin
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é {recipient_id}"
        )
    except Exception as e:
        error_message = f"Error sending application: {str(e)}"
        print(error_message)
        print(f"Current recipient IDs: {RECIPIENT_IDS}")
        print(f"Current recipient index: {current_recipient_index}")
        
        # Try to notify admin about the error
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –æ—Ç {name}:\n{error_message}\n\n"
                     f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {recipient_id} –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        except Exception as admin_error:
            print(f"Failed to notify admin: {str(admin_error)}")
    
    # Clear state but keep name for the final message
    temp_name = context.user_data.get('name')
    context.user_data.clear()
    context.user_data['name'] = temp_name
    
    # Remove keyboard and send final message
    reply_markup = ReplyKeyboardRemove()
    
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}! üôè\n\n"
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
        "–¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel the conversation."""
    # Clear all user data when canceling
    context.user_data.clear()
    
    # Remove keyboard
    reply_markup = ReplyKeyboardRemove()
    
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

def main():
    """Main function to run the bot."""
    # Get bot token from .env file
    try:
        with open('.env', 'r') as f:
            line = f.readline().strip()
            bot_token = line.split('=')[1].strip('"')  # Remove quotes if present
        print(f"Bot token loaded successfully")
    except Exception as e:
        print(f"Error loading token: {e}")
        return
    
    if not bot_token:
        print("Error: BOT_TOKEN not found")
        return
    
    # Create application
    application = Application.builder().token(bot_token).build()
    
    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)
            ],
            WAITING_FOR_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age)
            ],
            WAITING_FOR_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)
            ],
            WAITING_FOR_MEDIA: [
                MessageHandler(filters.PHOTO | filters.VIDEO, handle_media)
            ],
            QUESTION_1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)
            ],
            QUESTION_2: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)
            ],
            QUESTION_3: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)
            ],
            QUESTION_4: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)
            ],
            QUESTION_5: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)
            ],
            CONTACT_SHARING: [
                MessageHandler(filters.CONTACT, handle_contact)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(conv_handler)
    
    # Start the bot
    print("CosmetBot is starting...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

    
    